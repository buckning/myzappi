package com.amcglynn.myzappi;

import com.amcglynn.myzappi.core.config.ServiceManager;
import com.amcglynn.myzappi.service.ReminderServiceFactory;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;

/**
 * I forgot to register some intent handlers in the SkillStreamHandler before and wasted time figuring out what's wrong.
 * The purpose of this test is to prevent that from happening again.
 * If this test fails, make sure that you add your handler to MyZappiSkillStreamHandler and increment
 * EXPECTED_NUMBER_OF_INTENT_HANDLERS.
 */
class MyZappiSkillStreamHandlerTest {

    private static final int EXPECTED_NUMBER_OF_INTENT_HANDLERS = 38;

    @Test
    void testConstructorDoesNotThrowAnException() {
        new MyZappiSkillStreamHandler(mock(ServiceManager.class), mock(UserIdResolverFactory.class),
                mock(UserZoneResolver.class), mock(ReminderServiceFactory.class));
    }

    @Test
    void testAllIntentHandlersAreRegistered() throws Exception {
        var replaced = """
        {
  "type": "APL",
  "version": "2024.2",
  "description": "A hello world APL document.",
  "theme": "dark",
  "import": [
    {
      "name": "alexa-layouts",
      "version": "1.7.0"
    }
  ],
  "mainTemplate": {
    "parameters": [
      "payload"
    ],
    "items": [
      {
        "type": "AlexaHeadline",
        "id": "energyUsageGraph",
        "backgroundImageSource": "${payload.backgroundEnergyUsageGraph}"
      }
    ]
  }
}

        """.replace("${payload.backgroundEnergyUsageGraph}", "https://myzappi-autogenerated-graphs.s3.eu-west-1.amazonaws.com/awesomefiledude.png?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEGYaCWV1LXdlc3QtMSJGMEQCIGB1baaM8E2FYksQoAi3OICpyFftGZw7nRv%2BChk7oacXAiBnx9f2yKDNWCkNYzkkOG5fe1v3sjnXwqx07xN83Ns5kCrrAgiv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDYyOTkwNDAyNzg5MyIMDatR1KlvRzEUx8cvKr8CPZvvS9dOaDa%2FMkPT5b6zKIHOwa6EUbkNHMtyfovk8iGcNxJLmz%2FCU8ZWUNq7bs5%2FTzeMmYgnpIDEzDuoBv8C5M2R6fOFtM%2BDpPgIg65D7vcx4dH9NujfrP09pUyPqbmVOqWL0UcKwUbKn9MLYKZh6GSzuK4q1%2FUdz2D0sbOuveAcKw4VqndnNTOjjmevyUNrVFYbCdPUY5wdPu2XA1oG9opqv97oWuTUr2HstQbXE78%2BxdgD7pKgpVzg%2FrSPQylZHvNzyREbdr80g5KMelD96IgJvEym8m1Z36k2%2BHOoz%2F5UxZ%2BF%2FnYe1gcc5Sp1DnNB2TsTixKN%2BIuSdlOI8aXeboEpVmcZL%2FDNreOXt9gWYgpKXgrYLaKNhO33khmzvlfm2j5qFzNQpwbgTak1Ni7%2FsPUN6QN2HPGOl1G8mzMyfDCOive3BjqfAbSr5StlL47MMFNL9gv6RHo9nynnGXlDbq0GCua78UIRM0H2ucpiEoQzK%2FSRIM0BnmPY2lhxy%2FvwGw4QCvJorN2uH1Xd1X9vxzkZW%2F6NbWh7oUVLbvJPF155O2dEWFwhkX19frp8SSpKljxCiEEEtTj5S51MhRml%2FbySVcKbmU8iB2HamXanq7CZicBa%2Fgkimo%2BG6hszcivNImLPOcxLZQ%3D%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20241002T221201Z&X-Amz-SignedHeaders=host&X-Amz-Credential=ASIAZFKJUWD2XGBNQQBL%2F20241002%2Feu-west-1%2Fs3%2Faws4_request&X-Amz-Expires=600&X-Amz-Signature=f02918e43794959e688a2d3a603e8835b5264d908a31aaae2f182b2a8d4b2618");

        System.out.println(replaced);

        var filesInPackage = getClassNamesInPackage("com.amcglynn.myzappi.handlers")
                .stream().filter(file -> !file.endsWith("Test")).collect(Collectors.toList());
        assertThat(filesInPackage)
                .describedAs("Make sure to register your new RequestHandler in " +
                    "MySkillStreamHandler and then change this count manually in this test once it is done")
                .hasSize(EXPECTED_NUMBER_OF_INTENT_HANDLERS);
    }

    public List<String> getClassNamesInPackage(String packageName) throws IOException {
        var fileList = new ArrayList<String>();
        var classLoader = Thread.currentThread().getContextClassLoader();
        var path = packageName.replace('.', '/');
        var resources = classLoader.getResources(path);
        while (resources.hasMoreElements()) {
            File dir = new File(resources.nextElement().getFile());
            assertThat(dir).isNotNull().isDirectory();
            for (File file : dir.listFiles()) {
                if (file.isFile() && file.getName().endsWith(".class")) {
                    try {
                        fileList.add(Class.forName(packageName + '.' + file.getName().substring(0, file.getName().length() - 6)).getName());
                    } catch (ClassNotFoundException e) {
                        // Ignore classes that cannot be loaded
                    }
                }
            }
        }
        return fileList;
    }
}
